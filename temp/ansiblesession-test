#!/bin/bash

function namefail {
   echo "Name of this cript must be ansiblesession-SESSIONNAME, where SESSIONNAME can be any word."; 
   exit 1
}

FNAMEFULL=$(basename $BASH_SOURCE) 
FNAME=${FNAMEFULL##*-}
if [ "$FNAME" = "$FNAMEFULL" ]; then namefail ; fi
if [ -z "$FNAME" ]; then namefail ; fi
#echo "NAME IS $FNAME"

function showusage {
cat <<EOF

NAME
   ansiblesession-${FNAME} - configure and start the ansible session '${FNAME}'.
   
SYNOPSIS
   ansiblesession-${FNAME}                  - start ansible session ${FNAME}.
   ansiblesession-${FNAME} init             - Init volumes for session ${FNAME}.
   ansiblesession-${FNAME} setcfg CFGFILE   - Update .ansible.cfg with CFGFILE.
   ansiblesession-${FNAME} copykeys PATH    - Copy the ssh keys to /root/.ssh/
   
   ansiblesession-${FNAME} nuke             - remove volume containers for ${FNAME}.
   ansiblesession-${FNAME} list             - list all available ansible session volumes.
   
DESCRIPTION
   See https://github.com/j842/docker-ansible for information about the Docker 
   container this script configures and uses.

EXIT VALUES
   0   - success
   1   - error
   3   - no change
   
EOF
   exit 1
}

#------ VARIABLES -------------------


RVAL=3

CONTAINER_SHORTNAME="ansible"
CONTAINER_PREFIX=j842
CONTAINER_NAME="${CONTAINER_PREFIX}/${CONTAINER_SHORTNAME}"

NAME="$2"

VOLUME_NAME="ansible-config-${FNAME}"
VOLUME_MOUNT="/config"
VOLUME_VCMD="${VOLUME_NAME}:${VOLUME_MOUNT}"

ANSIBLE_NAME="ansible-data-${FNAME}"
# the path that the ansible playbooks are installed in.
# this is also hardcoded in Dockerfile
ANSIBLE_MOUNT="/data"
ANSIBLE_VCMD="${ANSIBLE_NAME}:${ANSIBLE_MOUNT}"

#------------------------------------

function copytocontainer {
   SRCPATH=$1
   DESTPATH=$2
   
   TEMPF="$(mktemp -d)"
   if [ -d ${SRCPATH} ]; then
      # copy folder of stuff
      rsync -a "${SRCPATH%/}/" "$TEMPF"
   else
      # copy single files
      cp "$SRCFILE" "$TEMPF"
   fi
  
   RESULT=$(docker run -i -t --name=ansible-${FNAME} -h ${HOSTNAME}-ansible \
            -v ${VOLUME_VCMD} \
            -v ${ANSIBLE_VCMD} \
           -v ${TEMPF}:/tocopy \
            ${CONTAINER_NAME}  \
            rsync -ai /tocopy/ ${DESTPATH}
            )
   if [ -n "$RESULT" ]; then echo "Files were changed." ; RVAL=0 ; fi
   docker rm "ansible-${FNAME}"
   rm -rf "$TEMPF"
}

function setcfg {
   copytocontainer $1 /config/ansible.cfg
}

function copykeys {
   copytocontainer "${1%/}" /config/sshkeys
}

function start {
   docker run -i -t --name=ansible-"${FNAME}" -h "${HOSTNAME}"-ansible \
            -v "${VOLUME_VCMD}" \
            -v "${ANSIBLE_VCMD}" \
            "${CONTAINER_NAME}"  
            
   docker rm ansible-"${FNAME}"
}

function command_exists { command -v "$1" >/dev/null 2>&1 ; }


function ensurevolexists {
  docker volume ls | grep "$1" > /dev/null
  if [ $? -ne 0 ] ; then
     echo Creating volume "$1"
     docker volume create --name "$1"
     RVAL=0
  fi
}

#   ansiblesession init NAME            - Init volumes for session called NAME.
function init {
   ensurevolexists "${VOLUME_NAME}"
   ensurevolexists "${ANSIBLE_NAME}"   
   
   rm -rf /tmp/config ; mkdir /tmp/config
cat <<EOF >/tmp/config/ansible.cfg
[defaults]
host_key_checking = false
pipelining = true
EOF
   mkdir /tmp/config/sshkeys
   
   copytocontainer /tmp/config /config
}

function namelist {
   NAMELIST=$(docker volume ls | grep ansible-config- | sed s/^.*config-//)
}


case "$1" in
   init)
      init
      ;;
      
   setcfg)
      setcfg "$2"
      ;;
      
   copykeys)
      copykeys "$2"
      ;;
      
   "")
      start
      ;;
      
   nuke)
      docker volume rm "$VOLUME_NAME"
      docker volume rm "$ANSIBLE_NAME"
      ;;
      
   clean)
      docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc spotify/docker-gc
      ;;
      
   list)
      namelist
      echo "$NAMELIST"
      ;;
      
   *)
      showusage
      ;;
esac



